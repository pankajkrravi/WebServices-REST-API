package com.goomo.restWS.RestfulWS.user;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@RestController
public class UserResource {
	@Autowired
	private UserDAOService daoService;

	// retrieve all users GET/users
	@GetMapping("/users")
	public List<User> retrieveAlluser()

	{
		return daoService.findAll();
	}

	// retrieve user(int id) GET/users/{id}
	@GetMapping("/users/{id}")
	public Resource<User> retrieveUser(@PathVariable int id) {
		User user = daoService.findOne(id);
		if (user == null) {
			throw new UserNotFoundException("id -" + id);
		}
		// "all-users",SERVICE-PATH + "/users"
		Resource<User> resource = new Resource<User>(user);
		// ControllerLinkBuilder.linkTo(controller) ==>static import fot hateoas
		ControllerLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retrieveAlluser());
		resource.add(linkTo.withRel("all-users"));
		//return user;
		return resource;
		
	}

	// input -> details of the user
	// output - created and Return the URI
	@PostMapping("/users")
	public ResponseEntity<Object> createUser(@Valid @RequestBody User user) {
		User savedUser = daoService.save(user);
		// CREATED
		// users/{id} savedUserid.getid()
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedUser.getId())
				.toUri();
		return ResponseEntity.created(location).build();

	}

	@DeleteMapping("/users/{id}")
	public void deleteUser(@PathVariable int id) {
		User user = daoService.deleteById(id);
		if (user == null) {
			throw new UserNotFoundException("id-" + id);
		}

	}
}
